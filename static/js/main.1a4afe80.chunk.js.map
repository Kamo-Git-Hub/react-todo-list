{"version":3,"sources":["Layouts/tasks.jsx","redux/todo-reducer.js","validations/input.jsx","validations/validate.js","Layouts/task-form.jsx","Layouts/create-todo.jsx","Layouts/todo-container.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["Tasks","props","title","className","userName","time","onClick","deleteTaskAC","id","initialState","name","list","count","Input","input","meta","error","touched","NameInput","requairedFild","value","maxLength","length","maxLengthCreater","minLength","minLengthCreater","TaskFormHock","reduxForm","form","useState","user","isInput","changeInput","onSubmit","handleSubmit","Field","component","validate","placeholder","onChange","e","target","type","required","disabled","CreateTodo","editMode","setEditMode","addTaskAC","addTask","TodoContainer","this","map","l","React","Component","connect","state","todo","taskId","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","pushed","filter","formReducer","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1a4afe80.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Tasks = (props) => {\n    // only if the task list is not empty display symbols for working with fields\n    return (\n        <div>\n            {props.title? \n                <div className=\"tasks\">\n                    <table>\n                        <tr>\n                            <th className=\"title\">{props.title}</th>\n                            <th className=\"name\">{props.userName}</th>\n                            <th className=\"time\">{props.time}</th>\n                            <th>\n                                <i\n                                    className=\"material-icons delete\"\n                                    onClick={() => props.deleteTaskAC(props.id)}\n                                >\n                                    delete\n                                </i>\n                            </th>\n                        </tr>\n                    </table>\n                </div>\n             :null}\n        </div>\n    );\n};\n\nexport default Tasks;\n","const initialState = {\n    name: \"Todo List\",\n    list: [\n        {\n            id: 0,\n            title: \"\",\n            userName: \"\",\n            time: \"\",\n            // done: false,\n        }\n    ]\n}\n\n\n\n\n//dynamic id generation\n// each new title will increment count by 1,\n// the resulting number will serve as an id for the title\nlet count = 0\n\n\nconst ADD_TASK = \"ADD_TASK\"\nconst DELETE = \"DELETE\"\n\n\n\n\n\nexport const todoReducer = (state = initialState, action) => {\n    switch (action.type) {\n       \n        case ADD_TASK: {\n            const pushed = {\n                title: action.addTask,\n                userName: action.userName,\n                time: action.time,\n                id: ++count\n            }\n            return {\n                ...state,\n                list: [...state.list, pushed]\n\n            }\n        }\n        case DELETE:\n            return {\n                ...state,\n                list: state.list.filter(title => title.id !== action.taskId)\n\n\n            }\n        default:\n            return state\n    }\n}\n\n\n\nexport const addTaskAC = (addTask, userName, time) => ({ type: ADD_TASK, addTask, userName, time })\nexport const deleteTaskAC = (taskId) => ({ type: DELETE, taskId })\n\n\n","import React from \"react\";\nimport \"../Layouts/style.css\";\n\n//title input\nexport const Input = ({ input, meta, ...props }) => {\n    return (\n        <div>\n            <input {...props} {...input} />\n            <div className=\"error\">\n                {meta.error && meta.touched && meta.error}\n            </div>\n        </div>\n    );\n};\n\n\nexport const NameInput = ({ input, meta, ...props }) => {\n    return (\n        <div>\n            <input {...props} {...input} />\n            <div className=\"error\">\n                {meta.error && meta.touched && meta.error}\n            </div>\n        </div>\n    );\n};\n","export const requairedFild = (value) => {\n    if (value) return undefined\n    return \"Required Field\"\n}\n\n//title input validation\nexport const maxLengthCreater = (maxLength) => (value) => {\n    if (value.length > maxLength) return `Maximal Length Is ${maxLength}`\n    return undefined\n}\n\n//name input validation\nexport const minLengthCreater = (minLength) => (value) => {\n    if (value.length < minLength) return 'Minimal Length Is 4 Symbol'\n    return undefined\n}","import React, { useState } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport \"./style.css\";\nimport { Input, NameInput } from \"../validations/input\";\nimport {\n    maxLengthCreater,\n    requairedFild,\n    minLengthCreater,\n} from \"../validations/validate\";\n\n//fields validations\nconst maxLength = maxLengthCreater(40);\n\n// if an error occurs to disable the time field field, the program will \n// still not work and will inform the user that the minimum \n// length of the name field is at least 4 symbols\nconst minLength = minLengthCreater(4);\n\nconst TaskForm = (props) => {\n    let [isInput, changeInput] = useState(props.user);\n    const isChange = (e) => {\n        changeInput((isInput = e.target.value));\n    };\n    return (\n        <div>\n            <form onSubmit={props.handleSubmit}>\n                <Field\n                    component={Input}\n                    validate={[requairedFild, maxLength]}\n                    name=\"addTask\"\n                    placeholder=\"Task\"\n                    className=\"input-title\"\n                />\n\n                <div className=\"inputs\">\n                    <Field\n                        onChange={isChange}\n                        component={NameInput}\n                        name=\"userName\"\n                        validate={[requairedFild, minLength]}\n                        className=\"input-name\"\n                        placeholder=\"name\"\n                    />\n{/* if the name field is less than 4 characters, the time field will be disabled */}\n                    {isInput.length < 4 ? \n                        <Field\n                            component=\"input\"\n                            name=\"time\"\n                            type=\"time\"\n                            className=\"time-input\"\n                            required\n                            disabled={true}\n                        />: \n                        <Field\n                            component=\"input\"\n                            name=\"time\"\n                            type=\"time\"\n                            className=\"time-input\"\n                            required\n                        />\n                    }\n                </div>\n\n                <button className=\"btn-small\">Add Task</button>\n            </form>\n        </div>\n    );\n};\n\nconst TaskFormHock = reduxForm({ form: \"task\" })(TaskForm);\n\nexport default TaskFormHock;\n","import React, { useState } from \"react\";\nimport TaskFormHock from \"./task-form\";\n\n\n//window for filling in fields, open / close\nconst CreateTodo = (props) => {\n    const [editMode, setEditMode] = useState(false);\n\n    const open = () => {\n        setEditMode(true);\n    };\n\n    const cancel = () => {\n        setEditMode(false);\n    };\n\n\n    //form fields\n    const createTask = (value) => {\n        props.addTaskAC(value.addTask, value.userName, value.time);\n\n        setEditMode(false);\n    };\n\n    return (\n        <div>\n            <h1 className=\"project-name\"> {props.name}</h1>\n            {editMode ? \n                <center>\n                    <TaskFormHock onSubmit={createTask} user={props.user} />\n                    <i\n                        className=\"material-icons\"\n                        title=\"Сancell\"\n                        onClick={cancel}\n                    >\n                        close\n                    </i>\n                </center>: \n                <div onClick={open}>\n                    <div className=\"for-add-btn\">\n                        <i className=\"material-icons\" title=\"Add Task\">\n                            add_circle\n                        </i>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default CreateTodo;\n","import React from \"react\"\nimport Tasks from \"./tasks\"\nimport { connect } from \"react-redux\"\nimport {  deleteTaskAC, addTaskAC } from '../redux/todo-reducer'\nimport CreateTodo from \"./create-todo\"\n\n\n//application components, separation\n\nclass TodoContainer extends React.Component {\n\n    render() {\n\n\n        return (\n            <div>\n                <div>\n                    <CreateTodo user={this.props.user}\n                        addTaskAC={this.props.addTaskAC}\n                        name={this.props.name} />\n\n\n                </div>\n\n                <div>\n\n\n                    {this.props.list.map((l) => <Tasks title={l.title}\n                        userName={l.userName}\n                        id={l.id}\n\n                        time={l.time}\n                        name={this.props.name}\n\n                        deleteTaskAC={this.props.deleteTaskAC}\n\n                    />)}\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return ({\n        name: state.todo.name,\n        list: state.todo.list,\n        //output from the array, so that the main component does not rotate\n        user: state.todo.list.map(l => l.userName)\n\n    })\n}\n\n\n\nexport default connect(mapStateToProps, {\n     deleteTaskAC, addTaskAC\n})(TodoContainer)","import React from 'react';\nimport TodoContainer from './Layouts/todo-container';\n\n\n\nconst App =(props)=>{\n  return(\n    <div className={\"container\"}>\n      <TodoContainer/>\n    </div>\n  )\n}\n\n\nexport default App;\n                  //FROM DEVELOPER\n// The program was developed with the use of reduction modules,\n//  reagi-reduction, reduction form. I also used the Css Materialize and google fonts library. \n//  I split the program into small components and commented out my code so that \n//  it could be easily reproduced and read.\n//  To write the main functionality, I used redux and hooks\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\"\nimport { todoReducer } from \"./todo-reducer\";\nimport { reducer as formReducer } from 'redux-form';\n\n\nconst reducers = combineReducers({\n    todo:todoReducer,\n    form:formReducer\n})\n\n\nexport const store = createStore(reducers)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css/dist/css/materialize.min.css'\nimport {store} from './redux/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store ={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}